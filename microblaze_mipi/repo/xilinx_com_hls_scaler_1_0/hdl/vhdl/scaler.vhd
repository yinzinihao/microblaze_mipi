-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaler is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    video_out_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    video_out_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC );
end;


architecture behav of scaler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scaler,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=24,HLS_SYN_DSP=28,HLS_SYN_FF=14602,HLS_SYN_LUT=9822}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal src_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal src_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal dst_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_video_in_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rgb_src_data_str_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_rgb_src_data_str_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rgb_src_data_str_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_rgb_src_data_str_1_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rgb_src_data_str_2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_rgb_src_data_str_2_write : STD_LOGIC;
    signal Resize_U0_ap_start : STD_LOGIC;
    signal Resize_U0_ap_done : STD_LOGIC;
    signal Resize_U0_ap_continue : STD_LOGIC;
    signal Resize_U0_ap_idle : STD_LOGIC;
    signal Resize_U0_ap_ready : STD_LOGIC;
    signal Resize_U0_img_rgb_src_data_str_read : STD_LOGIC;
    signal Resize_U0_img_rgb_src_data_str_1_read : STD_LOGIC;
    signal Resize_U0_img_rgb_src_data_str_2_read : STD_LOGIC;
    signal Resize_U0_img_rgb_dst_data_str_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_U0_img_rgb_dst_data_str_write : STD_LOGIC;
    signal Resize_U0_img_rgb_dst_data_str_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_U0_img_rgb_dst_data_str_1_write : STD_LOGIC;
    signal Resize_U0_img_rgb_dst_data_str_2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_U0_img_rgb_dst_data_str_2_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rgb_dst_data_str_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rgb_dst_data_str_1_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rgb_dst_data_str_2_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_out_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_video_out_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_out_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_video_out_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_video_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal img_rgb_src_data_str_full_n : STD_LOGIC;
    signal img_rgb_src_data_str_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_rgb_src_data_str_empty_n : STD_LOGIC;
    signal img_rgb_src_data_str_1_full_n : STD_LOGIC;
    signal img_rgb_src_data_str_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_rgb_src_data_str_1_empty_n : STD_LOGIC;
    signal img_rgb_src_data_str_2_full_n : STD_LOGIC;
    signal img_rgb_src_data_str_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_rgb_src_data_str_2_empty_n : STD_LOGIC;
    signal img_rgb_dst_data_str_full_n : STD_LOGIC;
    signal img_rgb_dst_data_str_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_rgb_dst_data_str_empty_n : STD_LOGIC;
    signal img_rgb_dst_data_str_1_full_n : STD_LOGIC;
    signal img_rgb_dst_data_str_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_rgb_dst_data_str_1_empty_n : STD_LOGIC;
    signal img_rgb_dst_data_str_2_full_n : STD_LOGIC;
    signal img_rgb_dst_data_str_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_rgb_dst_data_str_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal Resize_U0_start_full_n : STD_LOGIC;
    signal Resize_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        src_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rgb_src_data_str_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_src_data_str_full_n : IN STD_LOGIC;
        img_rgb_src_data_str_write : OUT STD_LOGIC;
        img_rgb_src_data_str_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_src_data_str_1_full_n : IN STD_LOGIC;
        img_rgb_src_data_str_1_write : OUT STD_LOGIC;
        img_rgb_src_data_str_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_src_data_str_2_full_n : IN STD_LOGIC;
        img_rgb_src_data_str_2_write : OUT STD_LOGIC );
    end component;


    component Resize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rgb_src_data_str_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_src_data_str_empty_n : IN STD_LOGIC;
        img_rgb_src_data_str_read : OUT STD_LOGIC;
        img_rgb_src_data_str_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_src_data_str_1_empty_n : IN STD_LOGIC;
        img_rgb_src_data_str_1_read : OUT STD_LOGIC;
        img_rgb_src_data_str_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_src_data_str_2_empty_n : IN STD_LOGIC;
        img_rgb_src_data_str_2_read : OUT STD_LOGIC;
        dst_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rgb_dst_data_str_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_dst_data_str_full_n : IN STD_LOGIC;
        img_rgb_dst_data_str_write : OUT STD_LOGIC;
        img_rgb_dst_data_str_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_dst_data_str_1_full_n : IN STD_LOGIC;
        img_rgb_dst_data_str_1_write : OUT STD_LOGIC;
        img_rgb_dst_data_str_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_dst_data_str_2_full_n : IN STD_LOGIC;
        img_rgb_dst_data_str_2_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rgb_dst_data_str_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_dst_data_str_empty_n : IN STD_LOGIC;
        img_rgb_dst_data_str_read : OUT STD_LOGIC;
        img_rgb_dst_data_str_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_dst_data_str_1_empty_n : IN STD_LOGIC;
        img_rgb_dst_data_str_1_read : OUT STD_LOGIC;
        img_rgb_dst_data_str_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rgb_dst_data_str_2_empty_n : IN STD_LOGIC;
        img_rgb_dst_data_str_2_read : OUT STD_LOGIC;
        video_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        video_out_TVALID : OUT STD_LOGIC;
        video_out_TREADY : IN STD_LOGIC;
        video_out_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        video_out_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scaler_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        src_rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        dst_rows : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    scaler_CONTROL_BUS_s_axi_U : component scaler_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        src_rows => src_rows,
        src_cols => src_cols,
        dst_cols => dst_cols,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        dst_rows => dst_rows);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        video_in_TDATA => video_in_TDATA,
        video_in_TVALID => video_in_TVALID,
        video_in_TREADY => AXIvideo2Mat_U0_video_in_TREADY,
        video_in_TKEEP => video_in_TKEEP,
        video_in_TSTRB => video_in_TSTRB,
        video_in_TUSER => video_in_TUSER,
        video_in_TLAST => video_in_TLAST,
        video_in_TID => video_in_TID,
        video_in_TDEST => video_in_TDEST,
        src_rows => src_rows,
        src_cols => src_cols,
        img_rgb_src_data_str_din => AXIvideo2Mat_U0_img_rgb_src_data_str_din,
        img_rgb_src_data_str_full_n => img_rgb_src_data_str_full_n,
        img_rgb_src_data_str_write => AXIvideo2Mat_U0_img_rgb_src_data_str_write,
        img_rgb_src_data_str_1_din => AXIvideo2Mat_U0_img_rgb_src_data_str_1_din,
        img_rgb_src_data_str_1_full_n => img_rgb_src_data_str_1_full_n,
        img_rgb_src_data_str_1_write => AXIvideo2Mat_U0_img_rgb_src_data_str_1_write,
        img_rgb_src_data_str_2_din => AXIvideo2Mat_U0_img_rgb_src_data_str_2_din,
        img_rgb_src_data_str_2_full_n => img_rgb_src_data_str_2_full_n,
        img_rgb_src_data_str_2_write => AXIvideo2Mat_U0_img_rgb_src_data_str_2_write);

    Resize_U0 : component Resize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Resize_U0_ap_start,
        ap_done => Resize_U0_ap_done,
        ap_continue => Resize_U0_ap_continue,
        ap_idle => Resize_U0_ap_idle,
        ap_ready => Resize_U0_ap_ready,
        src_rows => src_rows,
        src_cols => src_cols,
        img_rgb_src_data_str_dout => img_rgb_src_data_str_dout,
        img_rgb_src_data_str_empty_n => img_rgb_src_data_str_empty_n,
        img_rgb_src_data_str_read => Resize_U0_img_rgb_src_data_str_read,
        img_rgb_src_data_str_1_dout => img_rgb_src_data_str_1_dout,
        img_rgb_src_data_str_1_empty_n => img_rgb_src_data_str_1_empty_n,
        img_rgb_src_data_str_1_read => Resize_U0_img_rgb_src_data_str_1_read,
        img_rgb_src_data_str_2_dout => img_rgb_src_data_str_2_dout,
        img_rgb_src_data_str_2_empty_n => img_rgb_src_data_str_2_empty_n,
        img_rgb_src_data_str_2_read => Resize_U0_img_rgb_src_data_str_2_read,
        dst_rows => dst_rows,
        dst_cols => dst_cols,
        img_rgb_dst_data_str_din => Resize_U0_img_rgb_dst_data_str_din,
        img_rgb_dst_data_str_full_n => img_rgb_dst_data_str_full_n,
        img_rgb_dst_data_str_write => Resize_U0_img_rgb_dst_data_str_write,
        img_rgb_dst_data_str_1_din => Resize_U0_img_rgb_dst_data_str_1_din,
        img_rgb_dst_data_str_1_full_n => img_rgb_dst_data_str_1_full_n,
        img_rgb_dst_data_str_1_write => Resize_U0_img_rgb_dst_data_str_1_write,
        img_rgb_dst_data_str_2_din => Resize_U0_img_rgb_dst_data_str_2_din,
        img_rgb_dst_data_str_2_full_n => img_rgb_dst_data_str_2_full_n,
        img_rgb_dst_data_str_2_write => Resize_U0_img_rgb_dst_data_str_2_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        dst_rows => dst_rows,
        dst_cols => dst_cols,
        img_rgb_dst_data_str_dout => img_rgb_dst_data_str_dout,
        img_rgb_dst_data_str_empty_n => img_rgb_dst_data_str_empty_n,
        img_rgb_dst_data_str_read => Mat2AXIvideo_U0_img_rgb_dst_data_str_read,
        img_rgb_dst_data_str_1_dout => img_rgb_dst_data_str_1_dout,
        img_rgb_dst_data_str_1_empty_n => img_rgb_dst_data_str_1_empty_n,
        img_rgb_dst_data_str_1_read => Mat2AXIvideo_U0_img_rgb_dst_data_str_1_read,
        img_rgb_dst_data_str_2_dout => img_rgb_dst_data_str_2_dout,
        img_rgb_dst_data_str_2_empty_n => img_rgb_dst_data_str_2_empty_n,
        img_rgb_dst_data_str_2_read => Mat2AXIvideo_U0_img_rgb_dst_data_str_2_read,
        video_out_TDATA => Mat2AXIvideo_U0_video_out_TDATA,
        video_out_TVALID => Mat2AXIvideo_U0_video_out_TVALID,
        video_out_TREADY => video_out_TREADY,
        video_out_TKEEP => Mat2AXIvideo_U0_video_out_TKEEP,
        video_out_TSTRB => Mat2AXIvideo_U0_video_out_TSTRB,
        video_out_TUSER => Mat2AXIvideo_U0_video_out_TUSER,
        video_out_TLAST => Mat2AXIvideo_U0_video_out_TLAST,
        video_out_TID => Mat2AXIvideo_U0_video_out_TID,
        video_out_TDEST => Mat2AXIvideo_U0_video_out_TDEST);

    img_rgb_src_data_str_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rgb_src_data_str_din,
        if_full_n => img_rgb_src_data_str_full_n,
        if_write => AXIvideo2Mat_U0_img_rgb_src_data_str_write,
        if_dout => img_rgb_src_data_str_dout,
        if_empty_n => img_rgb_src_data_str_empty_n,
        if_read => Resize_U0_img_rgb_src_data_str_read);

    img_rgb_src_data_str_1_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rgb_src_data_str_1_din,
        if_full_n => img_rgb_src_data_str_1_full_n,
        if_write => AXIvideo2Mat_U0_img_rgb_src_data_str_1_write,
        if_dout => img_rgb_src_data_str_1_dout,
        if_empty_n => img_rgb_src_data_str_1_empty_n,
        if_read => Resize_U0_img_rgb_src_data_str_1_read);

    img_rgb_src_data_str_2_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rgb_src_data_str_2_din,
        if_full_n => img_rgb_src_data_str_2_full_n,
        if_write => AXIvideo2Mat_U0_img_rgb_src_data_str_2_write,
        if_dout => img_rgb_src_data_str_2_dout,
        if_empty_n => img_rgb_src_data_str_2_empty_n,
        if_read => Resize_U0_img_rgb_src_data_str_2_read);

    img_rgb_dst_data_str_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_U0_img_rgb_dst_data_str_din,
        if_full_n => img_rgb_dst_data_str_full_n,
        if_write => Resize_U0_img_rgb_dst_data_str_write,
        if_dout => img_rgb_dst_data_str_dout,
        if_empty_n => img_rgb_dst_data_str_empty_n,
        if_read => Mat2AXIvideo_U0_img_rgb_dst_data_str_read);

    img_rgb_dst_data_str_1_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_U0_img_rgb_dst_data_str_1_din,
        if_full_n => img_rgb_dst_data_str_1_full_n,
        if_write => Resize_U0_img_rgb_dst_data_str_1_write,
        if_dout => img_rgb_dst_data_str_1_dout,
        if_empty_n => img_rgb_dst_data_str_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_rgb_dst_data_str_1_read);

    img_rgb_dst_data_str_2_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_U0_img_rgb_dst_data_str_2_din,
        if_full_n => img_rgb_dst_data_str_2_full_n,
        if_write => Resize_U0_img_rgb_dst_data_str_2_write,
        if_dout => img_rgb_dst_data_str_2_dout,
        if_empty_n => img_rgb_dst_data_str_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_rgb_dst_data_str_2_read);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= (ap_start);
    AXIvideo2Mat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= ap_start;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    Resize_U0_ap_continue <= ap_const_logic_1;
    Resize_U0_ap_start <= ap_start;
    Resize_U0_start_full_n <= ap_const_logic_1;
    Resize_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (Resize_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= AXIvideo2Mat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= AXIvideo2Mat_U0_ap_ready;
    video_in_TREADY <= AXIvideo2Mat_U0_video_in_TREADY;
    video_out_TDATA <= Mat2AXIvideo_U0_video_out_TDATA;
    video_out_TDEST <= Mat2AXIvideo_U0_video_out_TDEST;
    video_out_TID <= Mat2AXIvideo_U0_video_out_TID;
    video_out_TKEEP <= Mat2AXIvideo_U0_video_out_TKEEP;
    video_out_TLAST <= Mat2AXIvideo_U0_video_out_TLAST;
    video_out_TSTRB <= Mat2AXIvideo_U0_video_out_TSTRB;
    video_out_TUSER <= Mat2AXIvideo_U0_video_out_TUSER;
    video_out_TVALID <= Mat2AXIvideo_U0_video_out_TVALID;
end behav;
