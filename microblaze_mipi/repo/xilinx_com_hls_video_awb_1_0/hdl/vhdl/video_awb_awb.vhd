-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity video_awb_awb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_V : IN STD_LOGIC_VECTOR (11 downto 0);
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of video_awb_awb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_st29_fsm_3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_st30_fsm_4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_st31_fsm_5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_st32_fsm_6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_st33_fsm_7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_st34_fsm_8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_st35_fsm_9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_st36_fsm_10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_st37_fsm_11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_st38_fsm_12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_st39_fsm_13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_st40_fsm_14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_st41_fsm_15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_st42_fsm_16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_st43_fsm_17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_st44_fsm_18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_st45_fsm_19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_st46_fsm_20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_st47_fsm_21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_st48_fsm_22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_st49_fsm_23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_st50_fsm_24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_st51_fsm_25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_st52_fsm_26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_st53_fsm_27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_st54_fsm_28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_st55_fsm_29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_st56_fsm_30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_st57_fsm_31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_st58_fsm_32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_st59_fsm_33 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_st60_fsm_34 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_st61_fsm_35 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_st62_fsm_36 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_37 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_38 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_39 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_40 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_41 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv22_556 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010101010110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal K : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal aver_r : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal aver_g : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal aver_b : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal col_i_reg_162 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_107 : BOOLEAN;
    signal tatol_pixs_cast_i_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_i_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal row_fu_213_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal row_reg_603 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_155 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_215 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_623_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_239_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_reg_632 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal ult_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult_reg_713_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult1_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult1_reg_718_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult2_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult2_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ult2_reg_723_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_733 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_738 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_743 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st64_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_494 : BOOLEAN;
    signal grp_fu_219_ap_done : STD_LOGIC;
    signal grp_fu_224_ap_done : STD_LOGIC;
    signal grp_fu_229_ap_done : STD_LOGIC;
    signal tmp_2_fu_493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_748 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_753 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_i_reg_758 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st65_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_517 : BOOLEAN;
    signal grp_fu_553_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_reg_763 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_cseq_ST_st66_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_526 : BOOLEAN;
    signal row_i_reg_151 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_542 : BOOLEAN;
    signal ap_sig_cseq_ST_st67_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_563 : BOOLEAN;
    signal sum_b_1_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_b_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_g_1_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_g_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_r_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_r_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tatol_pixs_fu_546_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_i_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_i_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_369_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_381_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p2y_fu_377_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_21_fu_390_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x7_fu_402_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p2y6_fu_398_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_23_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_fu_423_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p2y1_fu_419_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev2_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_471_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_i_fu_513_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_i_fu_516_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tatol_pixs_fu_546_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tatol_pixs_fu_546_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_553_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_219_ap_start : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_224_ap_start : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_229_ap_start : STD_LOGIC;
    signal grp_fu_229_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal grp_fu_296_ce : STD_LOGIC;
    signal grp_fu_309_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal grp_fu_351_ce : STD_LOGIC;
    signal grp_fu_364_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_283_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_283_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_296_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_296_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_309_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_309_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_338_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_351_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_364_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_553_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_553_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tatol_pixs_fu_546_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal tatol_pixs_fu_546_p10 : STD_LOGIC_VECTOR (23 downto 0);

    component video_awb_udiv_32ns_24ns_32_36_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component video_awb_mul_8ns_10ns_16_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component video_awb_udiv_16ns_8ns_16_20 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component video_awb_mul_mul_12ns_12ns_24_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component video_awb_am_addmul_8ns_9ns_12ns_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    video_awb_udiv_32ns_24ns_32_36_seq_U12 : component video_awb_udiv_32ns_24ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_219_ap_start,
        done => grp_fu_219_ap_done,
        din0 => sum_r_1_fu_96,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    video_awb_udiv_32ns_24ns_32_36_seq_U13 : component video_awb_udiv_32ns_24ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_224_ap_start,
        done => grp_fu_224_ap_done,
        din0 => sum_g_1_fu_92,
        din1 => grp_fu_224_p1,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    video_awb_udiv_32ns_24ns_32_36_seq_U14 : component video_awb_udiv_32ns_24ns_32_36_seq
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_229_ap_start,
        done => grp_fu_229_ap_done,
        din0 => sum_b_1_fu_88,
        din1 => grp_fu_229_p1,
        ce => grp_fu_229_ce,
        dout => grp_fu_229_p2);

    video_awb_mul_8ns_10ns_16_3_U15 : component video_awb_mul_8ns_10ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p2);

    video_awb_mul_8ns_10ns_16_3_U16 : component video_awb_mul_8ns_10ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        ce => grp_fu_296_ce,
        dout => grp_fu_296_p2);

    video_awb_mul_8ns_10ns_16_3_U17 : component video_awb_mul_8ns_10ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        ce => grp_fu_309_ce,
        dout => grp_fu_309_p2);

    video_awb_udiv_16ns_8ns_16_20_U18 : component video_awb_udiv_16ns_8ns_16_20
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_12_reg_680,
        din1 => grp_fu_338_p1,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p2);

    video_awb_udiv_16ns_8ns_16_20_U19 : component video_awb_udiv_16ns_8ns_16_20
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_15_reg_686,
        din1 => grp_fu_351_p1,
        ce => grp_fu_351_ce,
        dout => grp_fu_351_p2);

    video_awb_udiv_16ns_8ns_16_20_U20 : component video_awb_udiv_16ns_8ns_16_20
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_reg_692,
        din1 => grp_fu_364_p1,
        ce => grp_fu_364_ce,
        dout => grp_fu_364_p2);

    video_awb_mul_mul_12ns_12ns_24_1_U21 : component video_awb_mul_mul_12ns_12ns_24_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => tatol_pixs_fu_546_p0,
        din1 => tatol_pixs_fu_546_p1,
        dout => tatol_pixs_fu_546_p2);

    video_awb_am_addmul_8ns_9ns_12ns_22_1_U22 : component video_awb_am_addmul_8ns_9ns_12ns_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_553_p0,
        din1 => grp_fu_553_p1,
        din2 => grp_fu_553_p2,
        dout => grp_fu_553_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_41)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and not((ap_const_lv1_0 = exitcond_i_fu_234_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_fu_208_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = exitcond_i_fu_234_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_fu_208_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and not((ap_const_lv1_0 = exitcond_i_fu_234_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_fu_208_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- col_i_reg_162 assign process. --
    col_i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = exitcond_i_fu_234_p2))) then 
                col_i_reg_162 <= col_fu_239_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_i_fu_208_p2 = ap_const_lv1_0))) then 
                col_i_reg_162 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- row_i_reg_151 assign process. --
    row_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_3)) then 
                row_i_reg_151 <= row_reg_603;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                row_i_reg_151 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- sum_b_1_fu_88 assign process. --
    sum_b_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it1))) then 
                sum_b_1_fu_88 <= sum_b_fu_266_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                sum_b_1_fu_88 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_g_1_fu_92 assign process. --
    sum_g_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it1))) then 
                sum_g_1_fu_92 <= sum_g_fu_257_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                sum_g_1_fu_92 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_r_1_fu_96 assign process. --
    sum_r_1_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it1))) then 
                sum_r_1_fu_96 <= sum_r_fu_248_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                sum_r_1_fu_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_41)) then
                K <= mul_reg_763(21 downto 12);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it1 <= exitcond_i_reg_623;
                exitcond_i_reg_623 <= exitcond_i_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25))))) then
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it10 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it9;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it11 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it10;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it12 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it11;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it13 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it12;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it14 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it13;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it15 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it14;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it16 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it15;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it17 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it16;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it18 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it17;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it19 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it18;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it2 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it1;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it20 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it19;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it21 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it20;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it22 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it21;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it23 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it22;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it24 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it23;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it3 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it2;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it4 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it3;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it5 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it4;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it6 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it5;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it7 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it6;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it8 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it7;
                ap_reg_ppstg_exitcond_i_reg_623_pp0_it9 <= ap_reg_ppstg_exitcond_i_reg_623_pp0_it8;
                ap_reg_ppstg_ult1_reg_718_pp0_it10 <= ap_reg_ppstg_ult1_reg_718_pp0_it9;
                ap_reg_ppstg_ult1_reg_718_pp0_it11 <= ap_reg_ppstg_ult1_reg_718_pp0_it10;
                ap_reg_ppstg_ult1_reg_718_pp0_it12 <= ap_reg_ppstg_ult1_reg_718_pp0_it11;
                ap_reg_ppstg_ult1_reg_718_pp0_it13 <= ap_reg_ppstg_ult1_reg_718_pp0_it12;
                ap_reg_ppstg_ult1_reg_718_pp0_it14 <= ap_reg_ppstg_ult1_reg_718_pp0_it13;
                ap_reg_ppstg_ult1_reg_718_pp0_it15 <= ap_reg_ppstg_ult1_reg_718_pp0_it14;
                ap_reg_ppstg_ult1_reg_718_pp0_it16 <= ap_reg_ppstg_ult1_reg_718_pp0_it15;
                ap_reg_ppstg_ult1_reg_718_pp0_it17 <= ap_reg_ppstg_ult1_reg_718_pp0_it16;
                ap_reg_ppstg_ult1_reg_718_pp0_it18 <= ap_reg_ppstg_ult1_reg_718_pp0_it17;
                ap_reg_ppstg_ult1_reg_718_pp0_it19 <= ap_reg_ppstg_ult1_reg_718_pp0_it18;
                ap_reg_ppstg_ult1_reg_718_pp0_it20 <= ap_reg_ppstg_ult1_reg_718_pp0_it19;
                ap_reg_ppstg_ult1_reg_718_pp0_it21 <= ap_reg_ppstg_ult1_reg_718_pp0_it20;
                ap_reg_ppstg_ult1_reg_718_pp0_it22 <= ap_reg_ppstg_ult1_reg_718_pp0_it21;
                ap_reg_ppstg_ult1_reg_718_pp0_it23 <= ap_reg_ppstg_ult1_reg_718_pp0_it22;
                ap_reg_ppstg_ult1_reg_718_pp0_it6 <= ult1_reg_718;
                ap_reg_ppstg_ult1_reg_718_pp0_it7 <= ap_reg_ppstg_ult1_reg_718_pp0_it6;
                ap_reg_ppstg_ult1_reg_718_pp0_it8 <= ap_reg_ppstg_ult1_reg_718_pp0_it7;
                ap_reg_ppstg_ult1_reg_718_pp0_it9 <= ap_reg_ppstg_ult1_reg_718_pp0_it8;
                ap_reg_ppstg_ult2_reg_723_pp0_it10 <= ap_reg_ppstg_ult2_reg_723_pp0_it9;
                ap_reg_ppstg_ult2_reg_723_pp0_it11 <= ap_reg_ppstg_ult2_reg_723_pp0_it10;
                ap_reg_ppstg_ult2_reg_723_pp0_it12 <= ap_reg_ppstg_ult2_reg_723_pp0_it11;
                ap_reg_ppstg_ult2_reg_723_pp0_it13 <= ap_reg_ppstg_ult2_reg_723_pp0_it12;
                ap_reg_ppstg_ult2_reg_723_pp0_it14 <= ap_reg_ppstg_ult2_reg_723_pp0_it13;
                ap_reg_ppstg_ult2_reg_723_pp0_it15 <= ap_reg_ppstg_ult2_reg_723_pp0_it14;
                ap_reg_ppstg_ult2_reg_723_pp0_it16 <= ap_reg_ppstg_ult2_reg_723_pp0_it15;
                ap_reg_ppstg_ult2_reg_723_pp0_it17 <= ap_reg_ppstg_ult2_reg_723_pp0_it16;
                ap_reg_ppstg_ult2_reg_723_pp0_it18 <= ap_reg_ppstg_ult2_reg_723_pp0_it17;
                ap_reg_ppstg_ult2_reg_723_pp0_it19 <= ap_reg_ppstg_ult2_reg_723_pp0_it18;
                ap_reg_ppstg_ult2_reg_723_pp0_it20 <= ap_reg_ppstg_ult2_reg_723_pp0_it19;
                ap_reg_ppstg_ult2_reg_723_pp0_it21 <= ap_reg_ppstg_ult2_reg_723_pp0_it20;
                ap_reg_ppstg_ult2_reg_723_pp0_it22 <= ap_reg_ppstg_ult2_reg_723_pp0_it21;
                ap_reg_ppstg_ult2_reg_723_pp0_it23 <= ap_reg_ppstg_ult2_reg_723_pp0_it22;
                ap_reg_ppstg_ult2_reg_723_pp0_it6 <= ult2_reg_723;
                ap_reg_ppstg_ult2_reg_723_pp0_it7 <= ap_reg_ppstg_ult2_reg_723_pp0_it6;
                ap_reg_ppstg_ult2_reg_723_pp0_it8 <= ap_reg_ppstg_ult2_reg_723_pp0_it7;
                ap_reg_ppstg_ult2_reg_723_pp0_it9 <= ap_reg_ppstg_ult2_reg_723_pp0_it8;
                ap_reg_ppstg_ult_reg_713_pp0_it10 <= ap_reg_ppstg_ult_reg_713_pp0_it9;
                ap_reg_ppstg_ult_reg_713_pp0_it11 <= ap_reg_ppstg_ult_reg_713_pp0_it10;
                ap_reg_ppstg_ult_reg_713_pp0_it12 <= ap_reg_ppstg_ult_reg_713_pp0_it11;
                ap_reg_ppstg_ult_reg_713_pp0_it13 <= ap_reg_ppstg_ult_reg_713_pp0_it12;
                ap_reg_ppstg_ult_reg_713_pp0_it14 <= ap_reg_ppstg_ult_reg_713_pp0_it13;
                ap_reg_ppstg_ult_reg_713_pp0_it15 <= ap_reg_ppstg_ult_reg_713_pp0_it14;
                ap_reg_ppstg_ult_reg_713_pp0_it16 <= ap_reg_ppstg_ult_reg_713_pp0_it15;
                ap_reg_ppstg_ult_reg_713_pp0_it17 <= ap_reg_ppstg_ult_reg_713_pp0_it16;
                ap_reg_ppstg_ult_reg_713_pp0_it18 <= ap_reg_ppstg_ult_reg_713_pp0_it17;
                ap_reg_ppstg_ult_reg_713_pp0_it19 <= ap_reg_ppstg_ult_reg_713_pp0_it18;
                ap_reg_ppstg_ult_reg_713_pp0_it20 <= ap_reg_ppstg_ult_reg_713_pp0_it19;
                ap_reg_ppstg_ult_reg_713_pp0_it21 <= ap_reg_ppstg_ult_reg_713_pp0_it20;
                ap_reg_ppstg_ult_reg_713_pp0_it22 <= ap_reg_ppstg_ult_reg_713_pp0_it21;
                ap_reg_ppstg_ult_reg_713_pp0_it23 <= ap_reg_ppstg_ult_reg_713_pp0_it22;
                ap_reg_ppstg_ult_reg_713_pp0_it6 <= ult_reg_713;
                ap_reg_ppstg_ult_reg_713_pp0_it7 <= ap_reg_ppstg_ult_reg_713_pp0_it6;
                ap_reg_ppstg_ult_reg_713_pp0_it8 <= ap_reg_ppstg_ult_reg_713_pp0_it7;
                ap_reg_ppstg_ult_reg_713_pp0_it9 <= ap_reg_ppstg_ult_reg_713_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_38) and not(((ap_const_logic_0 = grp_fu_219_ap_done) or (ap_const_logic_0 = grp_fu_224_ap_done) or (ap_const_logic_0 = grp_fu_229_ap_done))))) then
                aver_b <= tmp_3_fu_503_p1;
                aver_g <= tmp_2_fu_493_p1;
                aver_r <= tmp_fu_483_p1;
                tmp_2_reg_748 <= tmp_2_fu_493_p1;
                tmp_3_reg_753 <= tmp_3_fu_503_p1;
                tmp_reg_743 <= tmp_fu_483_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_40)) then
                mul_reg_763 <= grp_fu_553_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_reg_603 <= row_fu_213_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_39)) then
                tmp_10_i_reg_758 <= tmp_10_i_fu_519_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it3))) then
                tmp_12_reg_680 <= grp_fu_283_p2;
                tmp_15_reg_686 <= grp_fu_296_p2;
                tmp_18_reg_692 <= grp_fu_309_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_i_reg_623) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then
                tmp_25_reg_632 <= src_data_stream_0_V_dout;
                tmp_26_reg_638 <= src_data_stream_1_V_dout;
                tmp_9_reg_644 <= src_data_stream_2_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it23))) then
                tmp_5_reg_738 <= tmp_5_fu_475_p3;
                tmp_6_reg_733 <= tmp_6_fu_458_p3;
                tmp_7_reg_728 <= tmp_7_fu_441_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it4))) then
                ult1_reg_718 <= ult1_fu_405_p2;
                ult2_reg_723 <= ult2_fu_426_p2;
                ult_reg_713 <= ult_fu_384_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_107, exitcond4_i_fu_208_p2, exitcond_i_fu_234_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it24, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25, grp_fu_219_ap_done, grp_fu_224_ap_done, grp_fu_229_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_107)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond4_i_fu_208_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_4;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it24)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and not((ap_const_lv1_0 = exitcond_i_fu_234_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it24))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))) and not((ap_const_lv1_0 = exitcond_i_fu_234_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st29_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st30_fsm_4 => 
                ap_NS_fsm <= ap_ST_st31_fsm_5;
            when ap_ST_st31_fsm_5 => 
                ap_NS_fsm <= ap_ST_st32_fsm_6;
            when ap_ST_st32_fsm_6 => 
                ap_NS_fsm <= ap_ST_st33_fsm_7;
            when ap_ST_st33_fsm_7 => 
                ap_NS_fsm <= ap_ST_st34_fsm_8;
            when ap_ST_st34_fsm_8 => 
                ap_NS_fsm <= ap_ST_st35_fsm_9;
            when ap_ST_st35_fsm_9 => 
                ap_NS_fsm <= ap_ST_st36_fsm_10;
            when ap_ST_st36_fsm_10 => 
                ap_NS_fsm <= ap_ST_st37_fsm_11;
            when ap_ST_st37_fsm_11 => 
                ap_NS_fsm <= ap_ST_st38_fsm_12;
            when ap_ST_st38_fsm_12 => 
                ap_NS_fsm <= ap_ST_st39_fsm_13;
            when ap_ST_st39_fsm_13 => 
                ap_NS_fsm <= ap_ST_st40_fsm_14;
            when ap_ST_st40_fsm_14 => 
                ap_NS_fsm <= ap_ST_st41_fsm_15;
            when ap_ST_st41_fsm_15 => 
                ap_NS_fsm <= ap_ST_st42_fsm_16;
            when ap_ST_st42_fsm_16 => 
                ap_NS_fsm <= ap_ST_st43_fsm_17;
            when ap_ST_st43_fsm_17 => 
                ap_NS_fsm <= ap_ST_st44_fsm_18;
            when ap_ST_st44_fsm_18 => 
                ap_NS_fsm <= ap_ST_st45_fsm_19;
            when ap_ST_st45_fsm_19 => 
                ap_NS_fsm <= ap_ST_st46_fsm_20;
            when ap_ST_st46_fsm_20 => 
                ap_NS_fsm <= ap_ST_st47_fsm_21;
            when ap_ST_st47_fsm_21 => 
                ap_NS_fsm <= ap_ST_st48_fsm_22;
            when ap_ST_st48_fsm_22 => 
                ap_NS_fsm <= ap_ST_st49_fsm_23;
            when ap_ST_st49_fsm_23 => 
                ap_NS_fsm <= ap_ST_st50_fsm_24;
            when ap_ST_st50_fsm_24 => 
                ap_NS_fsm <= ap_ST_st51_fsm_25;
            when ap_ST_st51_fsm_25 => 
                ap_NS_fsm <= ap_ST_st52_fsm_26;
            when ap_ST_st52_fsm_26 => 
                ap_NS_fsm <= ap_ST_st53_fsm_27;
            when ap_ST_st53_fsm_27 => 
                ap_NS_fsm <= ap_ST_st54_fsm_28;
            when ap_ST_st54_fsm_28 => 
                ap_NS_fsm <= ap_ST_st55_fsm_29;
            when ap_ST_st55_fsm_29 => 
                ap_NS_fsm <= ap_ST_st56_fsm_30;
            when ap_ST_st56_fsm_30 => 
                ap_NS_fsm <= ap_ST_st57_fsm_31;
            when ap_ST_st57_fsm_31 => 
                ap_NS_fsm <= ap_ST_st58_fsm_32;
            when ap_ST_st58_fsm_32 => 
                ap_NS_fsm <= ap_ST_st59_fsm_33;
            when ap_ST_st59_fsm_33 => 
                ap_NS_fsm <= ap_ST_st60_fsm_34;
            when ap_ST_st60_fsm_34 => 
                ap_NS_fsm <= ap_ST_st61_fsm_35;
            when ap_ST_st61_fsm_35 => 
                ap_NS_fsm <= ap_ST_st62_fsm_36;
            when ap_ST_st62_fsm_36 => 
                ap_NS_fsm <= ap_ST_st63_fsm_37;
            when ap_ST_st63_fsm_37 => 
                ap_NS_fsm <= ap_ST_st64_fsm_38;
            when ap_ST_st64_fsm_38 => 
                if (not(((ap_const_logic_0 = grp_fu_219_ap_done) or (ap_const_logic_0 = grp_fu_224_ap_done) or (ap_const_logic_0 = grp_fu_229_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st65_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st64_fsm_38;
                end if;
            when ap_ST_st65_fsm_39 => 
                ap_NS_fsm <= ap_ST_st66_fsm_40;
            when ap_ST_st66_fsm_40 => 
                ap_NS_fsm <= ap_ST_st67_fsm_41;
            when ap_ST_st67_fsm_41 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st67_fsm_41)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st67_fsm_41)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_107 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, exitcond_i_reg_623)
    begin
                ap_sig_bdd_155 <= (((src_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_i_reg_623)) or ((ap_const_lv1_0 = exitcond_i_reg_623) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_i_reg_623) and (src_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_reg_ppstg_exitcond_i_reg_623_pp0_it24)
    begin
                ap_sig_bdd_215 <= (((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it24)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it24) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it24) and (dst_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_494 assign process. --
    ap_sig_bdd_494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_494 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_517 assign process. --
    ap_sig_bdd_517_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_517 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_526 assign process. --
    ap_sig_bdd_526_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_526 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_542 assign process. --
    ap_sig_bdd_542_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_542 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_563 assign process. --
    ap_sig_bdd_563_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_563 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_61 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_61)
    begin
        if (ap_sig_bdd_61) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_3 assign process. --
    ap_sig_cseq_ST_st29_fsm_3_assign_proc : process(ap_sig_bdd_542)
    begin
        if (ap_sig_bdd_542) then 
            ap_sig_cseq_ST_st29_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_38 assign process. --
    ap_sig_cseq_ST_st64_fsm_38_assign_proc : process(ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then 
            ap_sig_cseq_ST_st64_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_39 assign process. --
    ap_sig_cseq_ST_st65_fsm_39_assign_proc : process(ap_sig_bdd_517)
    begin
        if (ap_sig_bdd_517) then 
            ap_sig_cseq_ST_st65_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st66_fsm_40 assign process. --
    ap_sig_cseq_ST_st66_fsm_40_assign_proc : process(ap_sig_bdd_526)
    begin
        if (ap_sig_bdd_526) then 
            ap_sig_cseq_ST_st66_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st67_fsm_41 assign process. --
    ap_sig_cseq_ST_st67_fsm_41_assign_proc : process(ap_sig_bdd_563)
    begin
        if (ap_sig_bdd_563) then 
            ap_sig_cseq_ST_st67_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_239_p2 <= std_logic_vector(unsigned(col_i_reg_162) + unsigned(ap_const_lv12_1));
    dst_data_stream_0_V_din <= tmp_5_reg_738;

    -- dst_data_stream_0_V_write assign process. --
    dst_data_stream_0_V_write_assign_proc : process(ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_i_reg_623_pp0_it24, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it24) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_1_V_din <= tmp_6_reg_733;

    -- dst_data_stream_1_V_write assign process. --
    dst_data_stream_1_V_write_assign_proc : process(ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_i_reg_623_pp0_it24, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it24) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_2_V_din <= tmp_7_reg_728;

    -- dst_data_stream_2_V_write assign process. --
    dst_data_stream_2_V_write_assign_proc : process(ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_i_reg_623_pp0_it24, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_623_pp0_it24) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_i_fu_208_p2 <= "1" when (row_i_reg_151 = src_rows_V) else "0";
    exitcond_i_fu_234_p2 <= "1" when (col_i_reg_162 = src_cols_V) else "0";

    -- grp_fu_219_ap_start assign process. --
    grp_fu_219_ap_start_assign_proc : process(exitcond4_i_fu_208_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_i_fu_208_p2 = ap_const_lv1_0)))) then 
            grp_fu_219_ap_start <= ap_const_logic_1;
        else 
            grp_fu_219_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_219_ce <= ap_const_logic_1;
    grp_fu_219_p1 <= tatol_pixs_cast_i_fu_190_p1(24 - 1 downto 0);

    -- grp_fu_224_ap_start assign process. --
    grp_fu_224_ap_start_assign_proc : process(exitcond4_i_fu_208_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_i_fu_208_p2 = ap_const_lv1_0)))) then 
            grp_fu_224_ap_start <= ap_const_logic_1;
        else 
            grp_fu_224_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_224_ce <= ap_const_logic_1;
    grp_fu_224_p1 <= tatol_pixs_cast_i_fu_190_p1(24 - 1 downto 0);

    -- grp_fu_229_ap_start assign process. --
    grp_fu_229_ap_start_assign_proc : process(exitcond4_i_fu_208_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_i_fu_208_p2 = ap_const_lv1_0)))) then 
            grp_fu_229_ap_start <= ap_const_logic_1;
        else 
            grp_fu_229_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_229_ce <= ap_const_logic_1;
    grp_fu_229_p1 <= tatol_pixs_cast_i_fu_190_p1(24 - 1 downto 0);

    -- grp_fu_283_ce assign process. --
    grp_fu_283_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            grp_fu_283_ce <= ap_const_logic_1;
        else 
            grp_fu_283_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_p0 <= grp_fu_283_p00(8 - 1 downto 0);
    grp_fu_283_p00 <= std_logic_vector(resize(unsigned(tmp_9_reg_644),16));
    grp_fu_283_p1 <= grp_fu_283_p10(10 - 1 downto 0);
    grp_fu_283_p10 <= std_logic_vector(resize(unsigned(K),16));

    -- grp_fu_296_ce assign process. --
    grp_fu_296_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            grp_fu_296_ce <= ap_const_logic_1;
        else 
            grp_fu_296_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_296_p0 <= grp_fu_296_p00(8 - 1 downto 0);
    grp_fu_296_p00 <= std_logic_vector(resize(unsigned(tmp_26_reg_638),16));
    grp_fu_296_p1 <= grp_fu_296_p10(10 - 1 downto 0);
    grp_fu_296_p10 <= std_logic_vector(resize(unsigned(K),16));

    -- grp_fu_309_ce assign process. --
    grp_fu_309_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            grp_fu_309_ce <= ap_const_logic_1;
        else 
            grp_fu_309_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_309_p0 <= grp_fu_309_p00(8 - 1 downto 0);
    grp_fu_309_p00 <= std_logic_vector(resize(unsigned(tmp_25_reg_632),16));
    grp_fu_309_p1 <= grp_fu_309_p10(10 - 1 downto 0);
    grp_fu_309_p10 <= std_logic_vector(resize(unsigned(K),16));

    -- grp_fu_338_ce assign process. --
    grp_fu_338_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            grp_fu_338_ce <= ap_const_logic_1;
        else 
            grp_fu_338_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_338_p1 <= grp_fu_338_p10(8 - 1 downto 0);
    grp_fu_338_p10 <= std_logic_vector(resize(unsigned(aver_r),16));

    -- grp_fu_351_ce assign process. --
    grp_fu_351_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            grp_fu_351_ce <= ap_const_logic_1;
        else 
            grp_fu_351_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_351_p1 <= grp_fu_351_p10(8 - 1 downto 0);
    grp_fu_351_p10 <= std_logic_vector(resize(unsigned(aver_g),16));

    -- grp_fu_364_ce assign process. --
    grp_fu_364_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            grp_fu_364_ce <= ap_const_logic_1;
        else 
            grp_fu_364_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_364_p1 <= grp_fu_364_p10(8 - 1 downto 0);
    grp_fu_364_p10 <= std_logic_vector(resize(unsigned(aver_b),16));
    grp_fu_553_p0 <= grp_fu_553_p00(8 - 1 downto 0);
    grp_fu_553_p00 <= std_logic_vector(resize(unsigned(tmp_3_reg_753),10));
    grp_fu_553_p1 <= grp_fu_553_p10(9 - 1 downto 0);
    grp_fu_553_p10 <= std_logic_vector(resize(unsigned(tmp_10_i_reg_758),10));
    grp_fu_553_p2 <= ap_const_lv22_556(12 - 1 downto 0);
    p2y1_fu_419_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_411_p3),25));
    p2y6_fu_398_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_390_p3),25));
    p2y_fu_377_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_369_p3),25));
    rev1_fu_449_p2 <= (ap_reg_ppstg_ult1_reg_718_pp0_it23 xor ap_const_lv1_1);
    rev2_fu_466_p2 <= (ap_reg_ppstg_ult2_reg_723_pp0_it23 xor ap_const_lv1_1);
    rev_fu_432_p2 <= (ap_reg_ppstg_ult_reg_713_pp0_it23 xor ap_const_lv1_1);
    row_fu_213_p2 <= std_logic_vector(unsigned(row_i_reg_151) + unsigned(ap_const_lv12_1));

    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(exitcond_i_reg_623, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_i_reg_623) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_1_V_read assign process. --
    src_data_stream_1_V_read_assign_proc : process(exitcond_i_reg_623, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_i_reg_623) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_2_V_read assign process. --
    src_data_stream_2_V_read_assign_proc : process(exitcond_i_reg_623, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_155, ap_reg_ppiten_pp0_it1, ap_sig_bdd_215, ap_reg_ppiten_pp0_it25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_i_reg_623) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_155 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_215 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it25)))))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_b_fu_266_p2 <= std_logic_vector(unsigned(sum_b_1_fu_88) + unsigned(tmp_16_i_fu_263_p1));
    sum_g_fu_257_p2 <= std_logic_vector(unsigned(sum_g_1_fu_92) + unsigned(tmp_15_i_fu_254_p1));
    sum_r_fu_248_p2 <= std_logic_vector(unsigned(sum_r_1_fu_96) + unsigned(tmp_14_i_fu_245_p1));
    tatol_pixs_cast_i_fu_190_p1 <= std_logic_vector(resize(unsigned(tatol_pixs_fu_546_p2),32));
    tatol_pixs_fu_546_p0 <= tatol_pixs_fu_546_p00(12 - 1 downto 0);
    tatol_pixs_fu_546_p00 <= std_logic_vector(resize(unsigned(src_cols_V),24));
    tatol_pixs_fu_546_p1 <= tatol_pixs_fu_546_p10(12 - 1 downto 0);
    tatol_pixs_fu_546_p10 <= std_logic_vector(resize(unsigned(src_rows_V),24));
    tmp_10_i_fu_519_p2 <= std_logic_vector(unsigned(tmp_7_cast_i_fu_513_p1) + unsigned(tmp_8_cast_i_fu_516_p1));
    tmp_14_i_fu_245_p1 <= std_logic_vector(resize(unsigned(tmp_9_reg_644),32));
    tmp_15_i_fu_254_p1 <= std_logic_vector(resize(unsigned(tmp_26_reg_638),32));
    tmp_16_i_fu_263_p1 <= std_logic_vector(resize(unsigned(tmp_25_reg_632),32));
    tmp_19_fu_369_p3 <= (aver_r & ap_const_lv8_0);
    tmp_20_fu_437_p1 <= grp_fu_338_p2(8 - 1 downto 0);
    tmp_21_fu_390_p3 <= (aver_g & ap_const_lv8_0);
    tmp_22_fu_454_p1 <= grp_fu_351_p2(8 - 1 downto 0);
    tmp_23_fu_411_p3 <= (aver_b & ap_const_lv8_0);
    tmp_24_fu_471_p1 <= grp_fu_364_p2(8 - 1 downto 0);
    tmp_2_fu_493_p1 <= grp_fu_224_p2(8 - 1 downto 0);
    tmp_3_fu_503_p1 <= grp_fu_229_p2(8 - 1 downto 0);
    tmp_5_fu_475_p3 <= 
        ap_const_lv8_FF when (rev2_fu_466_p2(0) = '1') else 
        tmp_24_fu_471_p1;
    tmp_6_fu_458_p3 <= 
        ap_const_lv8_FF when (rev1_fu_449_p2(0) = '1') else 
        tmp_22_fu_454_p1;
    tmp_7_cast_i_fu_513_p1 <= std_logic_vector(resize(unsigned(tmp_reg_743),9));
    tmp_7_fu_441_p3 <= 
        ap_const_lv8_FF when (rev_fu_432_p2(0) = '1') else 
        tmp_20_fu_437_p1;
    tmp_8_cast_i_fu_516_p1 <= std_logic_vector(resize(unsigned(tmp_2_reg_748),9));
    tmp_fu_483_p1 <= grp_fu_219_p2(8 - 1 downto 0);
    ult1_fu_405_p2 <= "1" when (unsigned(x7_fu_402_p1) < unsigned(p2y6_fu_398_p1)) else "0";
    ult2_fu_426_p2 <= "1" when (unsigned(x1_fu_423_p1) < unsigned(p2y1_fu_419_p1)) else "0";
    ult_fu_384_p2 <= "1" when (unsigned(x_fu_381_p1) < unsigned(p2y_fu_377_p1)) else "0";
    x1_fu_423_p1 <= std_logic_vector(resize(unsigned(tmp_18_reg_692),25));
    x7_fu_402_p1 <= std_logic_vector(resize(unsigned(tmp_15_reg_686),25));
    x_fu_381_p1 <= std_logic_vector(resize(unsigned(tmp_12_reg_680),25));
end behav;
