// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Resize (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_rows,
        src_cols,
        img_rgb_src_data_str_dout,
        img_rgb_src_data_str_empty_n,
        img_rgb_src_data_str_read,
        img_rgb_src_data_str_1_dout,
        img_rgb_src_data_str_1_empty_n,
        img_rgb_src_data_str_1_read,
        img_rgb_src_data_str_2_dout,
        img_rgb_src_data_str_2_empty_n,
        img_rgb_src_data_str_2_read,
        dst_rows,
        dst_cols,
        img_rgb_dst_data_str_din,
        img_rgb_dst_data_str_full_n,
        img_rgb_dst_data_str_write,
        img_rgb_dst_data_str_1_din,
        img_rgb_dst_data_str_1_full_n,
        img_rgb_dst_data_str_1_write,
        img_rgb_dst_data_str_2_din,
        img_rgb_dst_data_str_2_full_n,
        img_rgb_dst_data_str_2_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] src_rows;
input  [31:0] src_cols;
input  [7:0] img_rgb_src_data_str_dout;
input   img_rgb_src_data_str_empty_n;
output   img_rgb_src_data_str_read;
input  [7:0] img_rgb_src_data_str_1_dout;
input   img_rgb_src_data_str_1_empty_n;
output   img_rgb_src_data_str_1_read;
input  [7:0] img_rgb_src_data_str_2_dout;
input   img_rgb_src_data_str_2_empty_n;
output   img_rgb_src_data_str_2_read;
input  [31:0] dst_rows;
input  [31:0] dst_cols;
output  [7:0] img_rgb_dst_data_str_din;
input   img_rgb_dst_data_str_full_n;
output   img_rgb_dst_data_str_write;
output  [7:0] img_rgb_dst_data_str_1_din;
input   img_rgb_dst_data_str_1_full_n;
output   img_rgb_dst_data_str_1_write;
output  [7:0] img_rgb_dst_data_str_2_din;
input   img_rgb_dst_data_str_2_full_n;
output   img_rgb_dst_data_str_2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_rgb_src_data_str_read;
reg img_rgb_src_data_str_1_read;
reg img_rgb_src_data_str_2_read;
reg img_rgb_dst_data_str_write;
reg img_rgb_dst_data_str_1_write;
reg img_rgb_dst_data_str_2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire    grp_Resize_opr_bicubic_fu_196_ap_start;
wire    grp_Resize_opr_bicubic_fu_196_ap_done;
wire    grp_Resize_opr_bicubic_fu_196_ap_idle;
wire    grp_Resize_opr_bicubic_fu_196_ap_ready;
wire   [11:0] grp_Resize_opr_bicubic_fu_196_p_src_rows_V_read;
wire   [11:0] grp_Resize_opr_bicubic_fu_196_p_src_cols_V_read;
wire    grp_Resize_opr_bicubic_fu_196_p_src_data_stream_0_V_read;
wire    grp_Resize_opr_bicubic_fu_196_p_src_data_stream_1_V_read;
wire    grp_Resize_opr_bicubic_fu_196_p_src_data_stream_2_V_read;
wire   [11:0] grp_Resize_opr_bicubic_fu_196_p_dst_rows_V_read;
wire   [11:0] grp_Resize_opr_bicubic_fu_196_p_dst_cols_V_read;
wire   [7:0] grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_0_V_din;
wire    grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_0_V_write;
wire   [7:0] grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_1_V_din;
wire    grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_1_V_write;
wire   [7:0] grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_2_V_din;
wire    grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_2_V_write;
reg    ap_reg_grp_Resize_opr_bicubic_fu_196_ap_start;
reg    ap_block_state1_ignore_call18;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_grp_Resize_opr_bicubic_fu_196_ap_start = 1'b0;
end

Resize_opr_bicubic grp_Resize_opr_bicubic_fu_196(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Resize_opr_bicubic_fu_196_ap_start),
    .ap_done(grp_Resize_opr_bicubic_fu_196_ap_done),
    .ap_idle(grp_Resize_opr_bicubic_fu_196_ap_idle),
    .ap_ready(grp_Resize_opr_bicubic_fu_196_ap_ready),
    .p_src_rows_V_read(grp_Resize_opr_bicubic_fu_196_p_src_rows_V_read),
    .p_src_cols_V_read(grp_Resize_opr_bicubic_fu_196_p_src_cols_V_read),
    .p_src_data_stream_0_V_dout(img_rgb_src_data_str_dout),
    .p_src_data_stream_0_V_empty_n(img_rgb_src_data_str_empty_n),
    .p_src_data_stream_0_V_read(grp_Resize_opr_bicubic_fu_196_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img_rgb_src_data_str_1_dout),
    .p_src_data_stream_1_V_empty_n(img_rgb_src_data_str_1_empty_n),
    .p_src_data_stream_1_V_read(grp_Resize_opr_bicubic_fu_196_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img_rgb_src_data_str_2_dout),
    .p_src_data_stream_2_V_empty_n(img_rgb_src_data_str_2_empty_n),
    .p_src_data_stream_2_V_read(grp_Resize_opr_bicubic_fu_196_p_src_data_stream_2_V_read),
    .p_dst_rows_V_read(grp_Resize_opr_bicubic_fu_196_p_dst_rows_V_read),
    .p_dst_cols_V_read(grp_Resize_opr_bicubic_fu_196_p_dst_cols_V_read),
    .p_dst_data_stream_0_V_din(grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img_rgb_dst_data_str_full_n),
    .p_dst_data_stream_0_V_write(grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img_rgb_dst_data_str_1_full_n),
    .p_dst_data_stream_1_V_write(grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img_rgb_dst_data_str_2_full_n),
    .p_dst_data_stream_2_V_write(grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_2_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_Resize_opr_bicubic_fu_196_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Resize_opr_bicubic_fu_196_ap_start <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_Resize_opr_bicubic_fu_196_ap_start <= 1'b1;
        end else if ((grp_Resize_opr_bicubic_fu_196_ap_ready == 1'b1)) begin
            ap_reg_grp_Resize_opr_bicubic_fu_196_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_Resize_opr_bicubic_fu_196_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Resize_opr_bicubic_fu_196_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_dst_data_str_1_write = grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_1_V_write;
    end else begin
        img_rgb_dst_data_str_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_dst_data_str_2_write = grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_2_V_write;
    end else begin
        img_rgb_dst_data_str_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_dst_data_str_write = grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_0_V_write;
    end else begin
        img_rgb_dst_data_str_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_src_data_str_1_read = grp_Resize_opr_bicubic_fu_196_p_src_data_stream_1_V_read;
    end else begin
        img_rgb_src_data_str_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_src_data_str_2_read = grp_Resize_opr_bicubic_fu_196_p_src_data_stream_2_V_read;
    end else begin
        img_rgb_src_data_str_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_src_data_str_read = grp_Resize_opr_bicubic_fu_196_p_src_data_stream_0_V_read;
    end else begin
        img_rgb_src_data_str_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Resize_opr_bicubic_fu_196_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call18 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_Resize_opr_bicubic_fu_196_ap_start = ap_reg_grp_Resize_opr_bicubic_fu_196_ap_start;

assign grp_Resize_opr_bicubic_fu_196_p_dst_cols_V_read = dst_cols[11:0];

assign grp_Resize_opr_bicubic_fu_196_p_dst_rows_V_read = dst_rows[11:0];

assign grp_Resize_opr_bicubic_fu_196_p_src_cols_V_read = src_cols[11:0];

assign grp_Resize_opr_bicubic_fu_196_p_src_rows_V_read = src_rows[11:0];

assign img_rgb_dst_data_str_1_din = grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_1_V_din;

assign img_rgb_dst_data_str_2_din = grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_2_V_din;

assign img_rgb_dst_data_str_din = grp_Resize_opr_bicubic_fu_196_p_dst_data_stream_0_V_din;

endmodule //Resize
